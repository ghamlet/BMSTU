from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import json
from parser import parse_test_page
from ai_helper import get_ai_answers_sync
import os

class TestAssistant:
    def __init__(self):
        self.setup_driver()
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥—Ä–∞–π–≤–µ—Ä"""
        chrome_options = Options()
        chrome_options.add_argument("--user-data-ddir=./chrome_profile")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        self.driver = webdriver.Chrome(options=chrome_options)
        
    def get_current_page_html(self):
        """–ü–æ–ª—É—á–∞–µ—Ç HTML —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return self.driver.page_source
    
    def extract_test_questions(self, html_content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ HTML"""
        return parse_test_page(html_content)
    
    def display_answers_in_terminal(self, questions, answers):
        """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        print("\n" + "="*80)
        print("ü§ñ AI TEST ASSISTANT - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*80)
        
        for i, (question, answer) in enumerate(zip(questions, answers), 1):
            print(f"\n{'‚îÅ'*40}")
            print(f"–í–û–ü–†–û–° {i}:")
            print(f"{'‚îÅ'*40}")
            print(f"üìù {question['text']}")
            print(f"\nüìã –í–∞—Ä–∏–∞–Ω—Ç—ã:")
            for j, option in enumerate(question['options'], 1):
                print(f"   {j}. {option}")
            
            print(f"\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢:")
            print(f"   üéØ {answer['correct_answer']}")
            
            print(f"\nüìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
            print(f"   {answer['explanation']}")
            
            print(f"\n‚ö° –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer['confidence']}")
            
            if answer.get('grammar_rules') and answer['grammar_rules'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"\nüìñ –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:")
                print(f"   {answer['grammar_rules']}")
            
            if answer.get('why_others_wrong') and answer['why_others_wrong'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"\n‚ùå –ü–æ—á–µ–º—É –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ:")
                print(f"   {answer['why_others_wrong']}")
    
    def analyze_current_page(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã"""
        print("üîÑ –ü–æ–ª—É—á–∞—é HTML —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º HTML
        html_content = self.get_current_page_html()
        
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤...")
        questions = self.extract_test_questions(html_content)
        
        if not questions:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        for i, q in enumerate(questions, 1):
            print(f"\n{i}. {q['text']}")
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(q['options'][:3])}{'...' if len(q['options']) > 3 else ''}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò
        print(f"\nüß† –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Ç–≤–µ—Ç—ã —É –ò–ò...")
        answers = get_ai_answers_sync(questions)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.display_answers_in_terminal(questions, answers)
        
        return questions, answers
    
    def wait_for_user_input(self):
        """–ñ–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\n{'='*80}")
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        print("  [Enter] - –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        print("  'q' + [Enter] - –≤—ã–π—Ç–∏")
        print("  's' + [Enter] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª")
        return input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
    
    def save_to_file(self, questions, answers):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = f"test_results_{timestamp}.json"
        
        data = {
            "timestamp": timestamp,
            "questions": questions,
            "answers": answers
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        print("üöÄ AI Test Assistant –∑–∞–ø—É—â–µ–Ω!")
        print("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–æ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        try:
            while True:
                command = self.wait_for_user_input()
                
                if command == 'q':
                    break
                elif command == 's':
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if hasattr(self, 'last_questions') and hasattr(self, 'last_answers'):
                        self.save_to_file(self.last_questions, self.last_answers)
                    else:
                        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                    continue
                elif command == '':
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    try:
                        self.last_questions, self.last_answers = self.analyze_current_page()
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
                else:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        
        except KeyboardInterrupt:
            print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        finally:
            self.driver.quit()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    assistant = TestAssistant()
    
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    assistant.analyze_current_page()
    
    # –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    # assistant.run()

if __name__ == "__main__":
    main()