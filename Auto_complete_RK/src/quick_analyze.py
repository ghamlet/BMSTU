from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from parser import parse_test_page
from ai_helper import get_ai_answers_sync
import time

def quick_analyze():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º HTML —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        html_content = driver.page_source
        
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤...")
        questions = parse_test_page(html_content)
        
        if not questions:
            print("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–µ—Å—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç–∞.")
            return
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò
        print("üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò...")
        answers = get_ai_answers_sync(questions)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        print("ü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
        print("="*60)
        
        for i, (question, answer) in enumerate(zip(questions, answers), 1):
            print(f"\n{i}. {question['text']}")
            print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {answer['correct_answer']}")
            print(f"   üìñ {answer['explanation'][:100]}...")
            print(f"   ‚ö° –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer['confidence']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        driver.quit()

if __name__ == "__main__":
    quick_analyze()