# quick_start.py
from selenium import webdriver
import asyncio
from smart_parser import parse_page_with_ai, clean_parsed_questions
from smart_ai_helper import get_ai_answers

async def quick_analyze():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    driver = webdriver.Chrome()
    
    try:
        print("üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞")
        input("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
        
        html = driver.page_source
        current_url = driver.current_url
        print(f"üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {current_url}")
        print("üîç –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        parsed = await parse_page_with_ai(html)
        questions = clean_parsed_questions(parsed)
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        if questions:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
            for i, q in enumerate(questions, 1):
                print(f"\n{i}. {q['text'][:100]}...")
                print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(q['options'][:3])}{'...' if len(q['options']) > 3 else ''}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            print("\nü§î –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã...")
            answers = await get_ai_answers(questions)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "üé™ –†–ï–ó–£–õ–¨–¢–ê–¢–´:" + "="*50)
            for i, answer in enumerate(answers, 1):
                print(f"\n{i}. {answer['question_text'][:80]}...")
                print(f"   ‚úÖ –û–¢–í–ï–¢: {answer['correct_answer']}")
                print(f"   üí° {answer['explanation'][:80]}...")
                print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        driver.quit()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    asyncio.run(quick_analyze())

if __name__ == "__main__":
    main()