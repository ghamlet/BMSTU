# backup_ai_helper.py
import requests
import json
import time
from typing import List, Dict

OPENROUTER_API_KEY = "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"

def get_ai_answer_simple(question: Dict) -> Dict:
    """–ú–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ OpenRouter"""
    
    prompt = f"""
    –í–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É:
    {question['text']}
    
    –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:
    {chr(10).join([f"{chr(65+i)}. {opt}" for i, opt in enumerate(question['options'])])}
    
    –û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "correct_answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
        "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
        "confidence": "—É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
    }}
    """
    
    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/educational-assistant",
                "X-Title": "Test Assistant"
            },
            json={
                "model": "meta-llama/llama-3.3-70b-instruct:free",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 500,
                "temperature": 0.1
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            text = result["choices"][0]["message"]["content"]
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                json_start = text.find('{')
                json_end = text.rfind('}') + 1
                if json_start != -1 and json_end != 0:
                    answer_data = json.loads(text[json_start:json_end])
                    return {
                        'question_id': question['id'],
                        'question_text': question['text'],
                        'correct_answer': answer_data.get('correct_answer', '–ù–µ –Ω–∞–π–¥–µ–Ω'),
                        'explanation': answer_data.get('explanation', text),
                        'confidence': answer_data.get('confidence', '—Å—Ä–µ–¥–Ω—è—è'),
                        'is_correct': True
                    }
            except:
                pass
            
            return {
                'question_id': question['id'],
                'question_text': question['text'],
                'correct_answer': '–°–º–æ—Ç—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ',
                'explanation': text,
                'confidence': '—Å—Ä–µ–¥–Ω—è—è',
                'is_correct': True
            }
        else:
            error_text = response.text
            return create_error_response(question, f"HTTP {response.status_code}: {error_text}")
            
    except Exception as e:
        return create_error_response(question, f"–û—à–∏–±–∫–∞: {str(e)}")

def create_error_response(question: Dict, error: str) -> Dict:
    return {
        'question_id': question['id'],
        'question_text': question['text'],
        'correct_answer': '–û—à–∏–±–∫–∞',
        'explanation': error,
        'confidence': '–Ω–∏–∑–∫–∞—è',
        'is_correct': False
    }

def get_ai_answers_sync(questions: List[Dict]) -> List[Dict]:
    answers = []
    for i, question in enumerate(questions):
        print(f"ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å {i+1}/{len(questions)}...")
        answer = get_ai_answer_simple(question)
        answers.append(answer)
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    return answers