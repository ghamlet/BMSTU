# simple_sync_assistant.py
from selenium import webdriver
import requests
import json
import time

OPENROUTER_API_KEY = "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"

def parse_page_simple(html_content):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    from bs4 import BeautifulSoup
    import re
    
    soup = BeautifulSoup(html_content, 'html.parser')
    questions = []
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    question_elements = soup.find_all(class_=re.compile(r'que|question|qtext'))
    
    for i, elem in enumerate(question_elements):
        question_text = elem.get_text(strip=True)
        
        # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Ä—è–¥–æ–º
        options = []
        next_elem = elem.find_next(class_=re.compile(r'answer|option|choice'))
        if next_elem:
            for opt in next_elem.find_all(['label', 'td', 'div']):
                text = opt.get_text(strip=True)
                if text and len(text) > 1:
                    options.append(text)
        
        if question_text and len(question_text) > 10 and options:
            questions.append({
                'id': f'q_{i}',
                'text': question_text,
                'options': options[:10]  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            })
    
    return questions

def get_ai_answer_sync(question):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò"""
    prompt = f"""
    –í–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É:
    {question['text']}
    
    –í–∞—Ä–∏–∞–Ω—Ç—ã:
    {chr(10).join(question['options'])}
    
    –î–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {{"answer": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"}}
    """
    
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    
    data = {
        "model": "meta-llama/llama-4-scout:free",
        "messages": [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É. –û—Ç–≤–µ—á–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 500
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        if response.status_code == 200:
            result = response.json()
            text = result["choices"][0]["message"]["content"]
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                start = text.find('{')
                end = text.rfind('}') + 1
                if start != -1 and end != 0:
                    json_data = json.loads(text[start:end])
                    return {
                        'correct_answer': json_data.get('answer', '–ù–µ –Ω–∞–π–¥–µ–Ω'),
                        'explanation': json_data.get('explanation', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è')
                    }
            except:
                pass
            
            # –ï—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
            return {
                'correct_answer': '–°–º–æ—Ç—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ',
                'explanation': text
            }
        else:
            return {
                'correct_answer': f'–û—à–∏–±–∫–∞ {response.status_code}',
                'explanation': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç'
            }
    except Exception as e:
        return {
            'correct_answer': '–û—à–∏–±–∫–∞',
            'explanation': f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}'
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    driver = webdriver.Chrome()
    
    try:
        print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
        print("=" * 50)
        input("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
        
        # –ü–æ–ª—É—á–∞–µ–º HTML
        html = driver.page_source
        url = driver.current_url
        
        print(f"üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        # –ü–∞—Ä—Å–∏–º –≤–æ–ø—Ä–æ—Å—ã
        questions = parse_page_simple(html)
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        if not questions:
            print("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("   - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
        print("\nü§î –ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
        print("=" * 50)
        
        for i, question in enumerate(questions, 1):
            print(f"\n{i}. {question['text'][:100]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = get_ai_answer_sync(question)
            
            print(f"   ‚úÖ –û–¢–í–ï–¢: {answer['correct_answer']}")
            print(f"   üí° {answer['explanation'][:100]}...")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
            
        print("\n" + "=" * 50)
        print("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        driver.quit()

if __name__ == "__main__":
    main()