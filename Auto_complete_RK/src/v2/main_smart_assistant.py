# main_smart_assistant.py
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import asyncio
from smart_parser import parse_page_with_ai, clean_parsed_questions
from smart_ai_helper import get_ai_answers_sync
import json

class SmartTestAssistant:
    def __init__(self):
        self.driver = None
        
    def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    async def analyze_current_page(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if not self.driver:
            self.setup_browser()
        
        print("üöÄ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
        print("üìñ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
        input()
        
        # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        html_content = self.driver.page_source
        print(html_content)
        current_url = self.driver.current_url
        
        print(f"üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {current_url}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä HTML: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        print("üîç –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        parsed_data = await parse_page_with_ai(html_content)
        
        # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = clean_parsed_questions(parsed_data)
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        if questions:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            self.display_questions(questions)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò
            print("\nü§î –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã...")
            answers = get_ai_answers_sync(questions)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_results(answers)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_results(questions, answers, current_url)
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("   - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    
    def display_questions(self, questions: list):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        print("\n" + "üìã –ù–ê–ô–î–ï–ù–ù–´–ï –í–û–ü–†–û–°–´:" + "="*50)
        for i, q in enumerate(questions, 1):
            print(f"\n{i}. {q['text'][:100]}...")
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(q['options'][:3])}{'...' if len(q['options']) > 3 else ''}")
    
    def display_results(self, answers: list):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print("\n" + "üé™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:" + "="*50)
        
        correct_count = sum(1 for a in answers if a.get('is_correct', False))
        
        for i, answer in enumerate(answers, 1):
            print(f"\n{i}. {answer['question_text'][:80]}...")
            print(f"   ‚úÖ –û–¢–í–ï–¢: {answer['correct_answer']}")
            print(f"   üìù {answer['explanation'][:100]}...")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {answer.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if not answer.get('is_correct', False):
                print(f"   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ")
        
        print(f"\nüìä –ò–¢–û–ì–û: {correct_count}/{len(answers)} –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def save_results(self, questions: list, answers: list, url: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        results = {
            "url": url,
            "questions": questions,
            "answers": answers,
            "summary": {
                "total_questions": len(questions),
                "successful_answers": sum(1 for a in answers if a.get('is_correct', False)),
                "timestamp": asyncio.get_event_loop().time()
            }
        }
        
        with open("test_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            self.driver.quit()

async def main():
    assistant = SmartTestAssistant()
    
    try:
        await assistant.analyze_current_page()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        assistant.close()

if __name__ == "__main__":
    asyncio.run(main())

